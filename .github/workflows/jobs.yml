name: Run SSIS Packages Every 2 Minutes

on:
  workflow_dispatch:

jobs:
  run-ssis-packages:
    runs-on: self-hosted
    env:
      SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy SQL Server Agent Jobs
        shell: cmd
        run: |
          echo Deploying SQL Server Agent Jobs at %DATE% %TIME%
          echo SQL Server Name: %SQL_SERVER_NAME%  :: Debug line
          sqlcmd -S "%SQL_SERVER_NAME%" -d msdb -E -i "sql/deploy_ssis_jobs.sql"
          if %ERRORLEVEL% neq 0 (
            echo Failed to deploy SQL Server Agent Jobs
            exit /b %ERRORLEVEL%
          )
          echo SQL Server Agent Jobs deployed successfully

      - name: Loop and Execute SSIS Packages Every 2 Minutes
        shell: cmd
        run: |
          :loop
          echo Executing SSIS Packages at %DATE% %TIME%
          echo SQL Server Name: %SQL_SERVER_NAME%  :: Debug line to print variable
          
          sqlcmd -S "%SQL_SERVER_NAME%" -d SSISDB -E -i "sql/execute_package.sql"
          if %ERRORLEVEL% neq 0 (
            echo Failed to execute Package.dtsx
            exit /b %ERRORLEVEL%
          )

          sqlcmd -S "%SQL_SERVER_NAME%" -d SSISDB -E -i "sql/execute_clients.sql"
          if %ERRORLEVEL% neq 0 (
            echo Failed to execute Clients.dtsx
            exit /b %ERRORLEVEL%
          )

          sqlcmd -S "%SQL_SERVER_NAME%" -d SSISDB -E -i "sql/execute_timesheetetl.sql"
          if %ERRORLEVEL% neq 0 (
            echo Failed to execute TimesheetETL.dtsx
            exit /b %ERRORLEVEL%
          )

          echo Waiting 2 minutes before next run...
          timeout /t 120 /nobreak
          goto loop
