name: Deploy SSIS Package

on:
  workflow_dispatch:

jobs:
  deploy-ssis:
    runs-on: self-hosted  # Ensure this is your Windows machine with SSIS + SQL installed

    env:
      SQL_SERVER: ${{ secrets.SQL_SERVER }}
      SQL_PORT: ${{ secrets.SQL_PORT }}
      SQL_USERNAME: ${{ secrets.DEV_SQL_USER }}
      SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}
      SSIS_ISPAC_PATH: ssis/TimesheetETL.ispac
      SSIS_FOLDER_NAME: TimesheetETL
      SSIS_PROJECT_NAME: TimesheetETL

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install NuGet provider and SqlServer module
        shell: powershell
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
          Install-Module -Name SqlServer -Scope CurrentUser -Force -Confirm:$false

      - name: Install SMO package for IntegrationServices.dll
        shell: powershell
        run: |
          $sourceName = "nuget.org"
          $sourceUrl  = "https://api.nuget.org/v3/index.json"

          if (-not (Get-PackageSource | Where-Object { $_.Name -eq $sourceName })) {
            Register-PackageSource -Name $sourceName -ProviderName NuGet -Location $sourceUrl -Trusted -Force
          }

          Install-Package -Name Microsoft.SqlServer.SqlManagementObjects -RequiredVersion 172.76.0 -Source $sourceName -Force -Scope CurrentUser

          $dll = Get-ChildItem -Recurse "$env:USERPROFILE\Documents\WindowsPowerShell\Modules\Microsoft.SqlServer.SqlManagementObjects" `
                   -Filter Microsoft.SqlServer.Management.IntegrationServices.dll | Select-Object -First 1 -ExpandProperty FullName

          if (-not (Test-Path $dll)) {
            throw "IntegrationServices.dll not found in SMO package"
          }

          Add-Type -Path $dll

      - name: Set PowerShell Execution Policy
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force

      - name: Deploy SSIS Package to SSISDB
        shell: powershell
        run: |
          Import-Module SqlServer -Force
          
          $server  = "${{ env.SQL_SERVER }}"
          $port    = "${{ env.SQL_PORT }}"
          $user    = "${{ env.SQL_USERNAME }}"
          $pass    = "${{ env.SQL_PASSWORD }}"
          $folder  = "${{ env.SSIS_FOLDER_NAME }}"
          $project = "${{ env.SSIS_PROJECT_NAME }}"
          $ispac   = "${{ github.workspace }}\${{ env.SSIS_ISPAC_PATH }}"

          $connStr = "Data Source=$server,$port;Initial Catalog=master;User ID=$user;Password=$pass;TrustServerCertificate=True;"
          $sqlConn = New-Object System.Data.SqlClient.SqlConnection($connStr)
          $ssis    = New-Object Microsoft.SqlServer.Management.IntegrationServices.IntegrationServices($sqlConn)

          $catalog = $ssis.Catalogs["SSISDB"]
          if (-not $catalog) {
            Write-Error "SSISDB not found!"
            exit 1
          }

          $folderObj = $catalog.Folders[$folder]
          if (-not $folderObj) {
            $folderObj = New-Object Microsoft.SqlServer.Management.IntegrationServices.CatalogFolder($catalog, $folder, "Auto-created folder")
            $folderObj.Create()
          }

          $projectBytes = [System.IO.File]::ReadAllBytes($ispac)
          $folderObj.DeployProject($project, $projectBytes)
          Write-Host "âœ… SSIS Deployment completed."

      - name: Deploy SQL Agent Job
        shell: powershell
        run: |
          $server = "${{ env.SQL_SERVER }}"
          $port   = "${{ env.SQL_PORT }}"
          $user   = "${{ env.SQL_USERNAME }}"
          $pass   = "${{ env.SQL_PASSWORD }}"
          $script = "${{ github.workspace }}\sql\create_agent_job.sql"

          sqlcmd -S "$server,$port" -U "$user" -P "$pass" -d msdb -i "$script" -b
