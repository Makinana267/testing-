name: Deploy SSIS Package

on:
  workflow_dispatch:

jobs:
  deploy-ssis:
    runs-on: self-hosted  # Use your self-hosted Windows runner

    env:
      SQL_SERVER: ${{ secrets.SQL_SERVER }}
      SQL_PORT: ${{ secrets.SQL_PORT }}
      SQL_USERNAME: ${{ secrets.DEV_SQL_USER }}
      SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}
      SSIS_ISPAC_PATH: ssis/TimesheetETL.ispac
      SSIS_FOLDER_NAME: TimesheetETL
      SSIS_PROJECT_NAME: TimesheetETL

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy SSIS Package
        shell: powershell
        run: |
          Import-Module SqlServer -Force

          Add-Type -AssemblyName "Microsoft.SqlServer.Management.IntegrationServices"

          $server = "${{ env.SQL_SERVER }}"
          $port = "${{ env.SQL_PORT }}"
          $user = "${{ env.DEV_SQL_USER  }}"
          $pass = "${{ env.DEV_SQL_PASSWORD }}"
          $folder = "${{ env.SSIS_FOLDER_NAME }}"
          $project = "${{ env.SSIS_PROJECT_NAME }}"
          $ispac = "${{ github.workspace }}\${{ env.SSIS_ISPAC_PATH }}"

          $connStr = "Data Source=$server,$port;Initial Catalog=master;User ID=$user;Password=$pass;TrustServerCertificate=True;"
          $sqlConn = New-Object System.Data.SqlClient.SqlConnection($connStr)
          $ssis = New-Object Microsoft.SqlServer.Management.IntegrationServices.IntegrationServices($sqlConn)

          $catalog = $ssis.Catalogs["SSISDB"]
          if (-not $catalog) {
            Write-Error "SSISDB not found!"
            exit 1
          }

          $folderObj = $catalog.Folders[$folder]
          if (-not $folderObj) {
            $folderObj = New-Object Microsoft.SqlServer.Management.IntegrationServices.CatalogFolder($catalog, $folder, "Auto-created folder")
            $folderObj.Create()
          }

          $projectBytes = [System.IO.File]::ReadAllBytes($ispac)
          $folderObj.DeployProject($project, $projectBytes)
          Write-Host "SSIS Deployment completed."

      - name: Deploy SQL Agent Job
        shell: powershell
        run: |
          $server = "${{ env.SQL_SERVER }}"
          $port = "${{ env.SQL_PORT }}"
          $user = "${{ env.DEV_SQL_USER }}"
          $pass = "${{ env.DEV_SQL_PASSWORD }}"
          $script = "${{ github.workspace }}\sql\create_agent_job.sql"

          sqlcmd -S "$server,$port" -U "$user" -P "$pass" -d msdb -i "$script" -b
